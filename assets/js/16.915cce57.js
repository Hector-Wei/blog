(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{428:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"什么是stl-stl包含什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是stl-stl包含什么"}},[t._v("#")]),t._v(" "),s("strong",[t._v("什么是STL / STL包含什么")])]),t._v(" "),s("p",[t._v("容器、算法、迭代器、（仿函数、适配器、空间配置器）")]),t._v(" "),s("p",[t._v("容器：序列式容器（vector、list、deque、array、forward_list）关联式容器（set、map）")]),t._v(" "),s("p",[t._v("算法：排序、复制等算法")]),t._v(" "),s("p",[t._v("迭代器：不暴露内部结构进行遍历")]),t._v(" "),s("p",[t._v("仿函数：行为类似函数，可作为算法的某种策略")]),t._v(" "),s("p",[t._v("适配器：修饰容器 / 迭代器 / 仿函数接口的东西")]),t._v(" "),s("p",[t._v("空间配置器：负责空间的配置和管理")]),t._v(" "),s("h1",{attrs:{id:"stl优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stl优点"}},[t._v("#")]),t._v(" "),s("strong",[t._v("STL优点")])]),t._v(" "),s("p",[t._v("可复用性、高性能、高移植性、跨平台")]),t._v(" "),s("h1",{attrs:{id:"pair容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pair容器"}},[t._v("#")]),t._v(" "),s("strong",[t._v("pair容器")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("pair<T1, T2>p;\n  \nmap<string, int>p;\np.insert({hello, 1}) / p.insert(pair<string, int>(hello, 1))\n")])])]),s("h1",{attrs:{id:"vector-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vector-容器"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Vector 容器")])]),t._v(" "),s("p",[t._v("（1）底层是在堆中分配了一段连续的内存空间存放元素")]),t._v(" "),s("p",[t._v("（2）迭代器：begin(), end(), rbegin(), rend(), cbegin, cend()")]),t._v(" "),s("p",[t._v("（3）扩容：分配更大的空间，复制原有的元素、释放原来的内存空间、插入新的元素")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("capacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大空间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前使用空间")]),t._v("\ncapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等时进行扩容（翻倍 -> 保证常数复杂度）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只改变容器元素数量大小，不改变容量  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reserve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变容量")]),t._v("\n")])])]),s("p",[t._v("（4）插入元素")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("push_back() // 首先创建一个新的元素，将它移动 / 拷贝到容器中\nemplace_back() // 直接在vector末尾插入元素\n\ninsert()\nemplace()\n")])])]),s("p",[t._v("（5）删除元素")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("erase() // 改变size大小\nclear() // 清空size\npop_back() // 删除末尾元素\nvector<int>(vec).swap(vec) //  清空多余的空间\n")])])]),s("h1",{attrs:{id:"list容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list容器"}},[t._v("#")]),t._v(" "),s("strong",[t._v("list容器")])]),t._v(" "),s("p",[t._v("（1）内存地址不连续，通过指针进行访问")]),t._v(" "),s("p",[t._v("（2）双向链表")])])}),[],!1,null,null,null);s.default=n.exports}}]);